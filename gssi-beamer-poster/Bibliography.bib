@incollection{Harel1985,
abstract = {Some observations are made concerning the process of developing complex systems. A broad class of systems, termed reactive, is singled out as being particularly problematic when it comes to finding satisfactory methods for behavioral description. In this paper we recommend the recently proposed statechart method for this purpose. Moreover, it is observed that most reactive systems cannot be developed in a linear stepwise fashion, but, rather, give rise to a two-dimensional development process, featuring behavioral aspects in the one dimension and implementational ones in the other. Concurrency may occur in both dimensions, as orthogonality of states in the one and as parallelism of subsystems in the other. A preliminary approach to working one's way through this "magic square" of system development is then presented. The ideas described herein seem to be relevant to a wide variety of application areas.},
address = {Berlin, Heidelberg},
author = {Harel, David and Pnueli, Amir},
booktitle = {Logics and Models of Concurrent Systems},
doi = {10.1007/978-3-642-82453-1_17},
file = {:Users/luca/Documents/Mendeley Desktop/Harel, Pnueli - On the Development of Reactive Systems - 1985.pdf:pdf},
pages = {477--498},
publisher = {Springer Berlin Heidelberg},
title = {{On the Development of Reactive Systems}},
url = {http://www.springerlink.com/index/10.1007/978-3-642-82453-1{\_}17},
year = {1985}
}
@book{Milner1980,
address = {Berlin, Heidelberg},
author = {Milner, Robin},
doi = {10.1007/3-540-10235-3},
editor = {Goos, G and Hartmanis, J},
file = {:Users/luca/Documents/Mendeley Desktop/Milner - A Calculus of Communicating Systems - 1980.pdf:pdf},
isbn = {978-3-540-10235-9},
publisher = {Springer Berlin Heidelberg},
series = {Lecture Notes in Computer Science},
title = {{A Calculus of Communicating Systems}},
url = {http://link.springer.com/10.1007/3-540-10235-3},
volume = {92},
year = {1980}
}
@article{Lamport1977,
abstract = {The inductive assertion method is generalized to permit formal, machine-verifiable proofs of correctness for multiprocess programs. Individual processes are represented by ordinary flowcharts, and no special synchronization mechanisms are assumed, so the method can be applied to a large class of multiprocess programs. A correctness proof can be designed together with the program by a hierarchical process of stepwise refinement, making the method practical for larger programs. The resulting proofs tend to be natural formalizations of the informal proofs that are now used.},
author = {Lamport, Leslie},
doi = {10.1109/TSE.1977.229904},
file = {:Users/luca/Documents/Mendeley Desktop/Lamport - Proving the Correctness of Multiprocess Programs - 1977.pdf:pdf},
isbn = {10.1109/TSE.1977.229904},
issn = {0098-5589},
journal = {IEEE Transactions on Software Engineering},
keywords = {assertions,concufrent programming,correctness,multiprocessing,synchronization},
month = {mar},
number = {2},
pages = {125--143},
title = {{Proving the Correctness of Multiprocess Programs}},
url = {http://lamport.azurewebsites.net/pubs/proving.pdf http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1702415 http://ieeexplore.ieee.org/document/1702415/},
volume = {SE-3},
year = {1977}
}
@article{Dijkstra1965,
author = {Dijkstra, E. W.},
doi = {10.1145/365559.365617},
file = {:Users/luca/Documents/Mendeley Desktop/Dijkstra - Solution of a problem in concurrent programming control - 1965.pdf:pdf},
issn = {00010782},
journal = {Communications of the ACM},
month = {sep},
number = {9},
pages = {569},
title = {{Solution of a problem in concurrent programming control}},
url = {http://portal.acm.org/citation.cfm?doid=365559.365617},
volume = {8},
year = {1965}
}
@article{Gelernter1985,
abstract = {Generative communication is the basis of a new distributed programming langauge that is intended for systems programming in distributed settings generally and on integrated network computers in particular. It differs from previous interprocess communication models in specifying that messages be added in tuple-structured form to the computation environment, where they exist as named, independent entities until some process chooses to receive them. Generative communication results in a number of distinguishing properties in the new language, Linda, that is built around it. Linda is fully distributed in space and distributed in time; it allows distributed sharing, continuation passing, and structured naming. We discuss these properties and their implications, then give a series of examples. Linda presents novel implementation problems that we discuss in Part II. We are particularly concerned with implementation of the dynamic global name space that the generative communication model requires.},
author = {Gelernter, David},
doi = {10.1145/2363.2433},
file = {:Users/luca/Documents/Mendeley Desktop/Gelernter - Generative communication in Linda - 1985.pdf:pdf},
issn = {01640925},
journal = {ACM Transactions on Programming Languages and Systems},
month = {jan},
number = {1},
pages = {80--112},
title = {{Generative communication in Linda}},
url = {http://portal.acm.org/citation.cfm?doid=2363.2433},
volume = {7},
year = {1985}
}
